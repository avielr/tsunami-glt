// def iShell(){
//     cmd = ''
//     while(true){
//         try {
//             cmd = input message: 'Enter command to run or enter exit for exit:', parameters: [string(defaultValue: cmd, description: '', name: 'cmd', trim: false)]
//             if (cmd == 'exit'){
//                 break
//             }
//             result = sh([returnStdout: true, script: cmd]).trim()
//             if(result){
//                 print result
//             }
//         } catch(err) {
//             print err
//         }
//     }
// }

def serversToScan = ['www.ynet.co.il'] // list of servers

def stepsForParallel = serversToScan.collectEntries {
    ["echoing ${it}" : transformIntoStep(it)]
}

parallel stepsForParallel

def transformIntoStep(inputString) {
    // We need to wrap what we return in a Groovy closure, or else it's invoked
    // when this method is called, not when we pass it to parallel.
    // To do this, you need to wrap the code below in { }, and either return
    // that explicitly, or use { -> } syntax.
    return {
      podTemplate(yaml: """
      apiVersion: v1
      kind: Pod
      spec:
        containers:
        - name: tsunami
          image: aviel1988/tsunami-glt
          command: ["java","-cp","tsunami.jar:plugins/*","-Dtsunami.config.location=/usr/tsunami/tsunami.yaml","com.google.tsunami.main.cli.TsunamiCli"]
          args: ["--hostname-target=${inputString}", "--scan-results-local-output-format=JSON", "--scan-results-local-output-filename=/workspace/tsunami-output.json"]
          volumeMounts:
          - mountPath: '/workspace'
            name: sharedworkspace
        - name: busybox
          image: busybox
          command: ["cat"]
          tty: true
          volumeMounts:
          - mountPath: '/workspace'
            name: sharedworkspace
        volumes:
        - name: sharedworkspace
          emptyDir: {}
      """
        ) {
          node(POD_LABEL) {
              container('tsunami'){
                string filename = "/workspace/tsunami-output.json"
                timeout(time: 1200, unit: 'SECONDS'){
                  waitUntil(initialRecurrencePeriod: 60000) { 
                    script{
                      def exists = sh script: "[[ -f ${filename} ]]", returnStatus: true 
                      return exists == 0
                    } 
                  } 
                }
              }
              container('busybox'){
                sh 'cat /workspace/tsunami-output.json'
              }
            }
          }
    }
}

step([$class: 'Mailer', recipients: 'admin@somewhere'])

import groovy.json.JsonOutput

def json = readJSON file: '${filename}'
def jsonFormat = JsonOutput.toJson(json)
prettyJSON = JsonOutput.prettyPrint(jsonFormat)
      echo "${prettyJSON}"
  }      