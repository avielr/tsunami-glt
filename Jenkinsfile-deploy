// def iShell(){
//     cmd = ''
//     while(true){
//         try {
//             cmd = input message: 'Enter command to run or enter exit for exit:', parameters: [string(defaultValue: cmd, description: '', name: 'cmd', trim: false)]
//             if (cmd == 'exit'){
//                 break
//             }
//             result = sh([returnStdout: true, script: cmd]).trim()
//             if(result){
//                 print result
//             }
//         } catch(err) {
//             print err
//         }
//     }
// }

def serversToScan = ['www.ynet.co.il', '212.29.241.223'] // list of servers

def stepsForParallel = serversToScan.collectEntries {
    ["echoing ${it}" : transformIntoStep(it)]
}

parallel stepsForParallel

def transformIntoStep(inputString) {
    // We need to wrap what we return in a Groovy closure, or else it's invoked
    // when this method is called, not when we pass it to parallel.
    // To do this, you need to wrap the code below in { }, and either return
    // that explicitly, or use { -> } syntax.
    return {
      podTemplate(yaml: """
      apiVersion: v1
      kind: Pod
      spec:
        containers:
        - name: tsunami
          image: aviel1988/tsunami-glt
          command:
          - --hostname-target=${inputString} --scan-results-local-output-format=JSON --scan-results-local-output-filename=/tmp/${inputString}-tsunami-result.json
      """
        ) {
        node(POD_LABEL) {
            echo inputString
        }
      }
    }
}
