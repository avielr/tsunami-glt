properties([
buildDiscarder(
    logRotator(numToKeepStr: '50')),
    parameters([
    string(
        defaultValue: '\'192.168.1.2\',\'192.168.1.1\',\'192.168.1.3\'', 
        description: '''Enter URL / IP to scan in the following format \'\',\'\',\'\'''', 
        name: 'serversToScan', trim: true
    ), 
    string(
        defaultValue: 'test@test.com', 
        description: '', 
        name: 'E-Mail address', 
        trim: true
    )
    ]), 
    pipelineTriggers([
    upstream('1.Build-glt-tsunami')
    ])
])


public static boolean checkIP(String str)
{
    println 'Inside checkIP'
    try
    {
         String[] parts = str.split("\\.");
         if (parts.length != 4) return false;
         for (int i = 0; i < 4; ++i)
         {
             int p = Integer.parseInt(parts[i]);
             if (p > 255 || p < 0) return false;
         }
         println 'valid IP'
         return true;
    } catch (Exception e)
    {
        println 'invalid IP'
        return false;
    }
}

def transformIntoStep(inputString) {
  return {
    podTemplate(yaml: """
    apiVersion: v1
    kind: Pod
    spec:
      containers:
      - name: tsunami
        image: aviel1988/tsunami-glt
        command:
        - cat
        tty: true
        volumeMounts:
        - mountPath: '/workspace'
          name: sharedworkspace
      - name: busybox
        image: busybox
        command: ["cat"]
        tty: true
        volumeMounts:
        - mountPath: '/workspace'
          name: sharedworkspace
      volumes:
      - name: sharedworkspace
        emptyDir: {}
    """
    ){
      node(POD_LABEL) {
        stage("Scan"){
            println 'Hereeeeee'
            boolean isIP = checkIP(inputString)
            println isIP
            if(isIP){
                println 'inside isIP'
                String tsunamiCLI = '--ip-v4-target'
            } else {
                String tsunamiCLI = '--hostname-target'
                println 'inside isIP'
            }
            println "tsunamiCLI=${tsunamiCLI}"
            println "inputString=${inputString}"
            container('tsunami'){
                string filename = "/workspace/tsunami-output.json"
                timeout(time: 2700, unit: 'SECONDS'){ // Full Tsunami scan took 36.82 min.
                println "tsunamiCLI=${tsunamiCLI}"
                println "inputString=${inputString}"
                sh "cd /usr/tsunami; java -cp \"tsunami.jar:plugins/nmap_port_scanner-0.0.1-SNAPSHOT.jar\" -Dtsunami.config.location=/usr/tsunami/tsunami.yaml com.google.tsunami.main.cli.TsunamiCli --hostname-target=${inputString} --scan-results-local-output-format=JSON --scan-results-local-output-filename=/workspace/tsunami-output.json"
                }
            }
        }

        stage("Report"){
          container('busybox'){
            sh 'cat /workspace/tsunami-output.json'
          }
        }
      }
    }
  }
}

node {  
    stage('Setup parameters'){

    }
    stage('Parallel') { 
        def stepsForParallel = serversToScan.split(',')collectEntries {
            ["${it}" : transformIntoStep(it)]
        }
        parallel stepsForParallel
    }
    stage('Deploy') { 
        // 
    }
}